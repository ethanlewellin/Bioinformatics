# -*- coding: utf-8 -*-
"""Protein Alignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TjRw006oXxASM9VuoTWGcVqc62YTxfIG
"""

!pip install BioPython

from Bio.PDB import *
from Bio.SubsMat import MatrixInfo as matlist
from Bio import pairwise2
from Bio.pairwise2 import format_alignment

pdbl = PDBList()

# download the pdb files
pdbl.retrieve_pdb_file("2k49",file_format='pdb')
pdbl.retrieve_pdb_file("2k8e",file_format='pdb')
parser = PDBParser()

# note their location and file name on colab
# you may also download them as PDB files and indicate the path on your machine when running locally
str1 = parser.get_structure("protA","/content/k4/pdb2k49.ent")
str2 = parser.get_structure("protB","/content/k8/pdb2k8e.ent")

def aa_residues(chain):
        aa_only = []
        for i in chain:
            if i.get_resname() in standard_aa_names:
                aa_only.append(i)
        return aa_only

# get the sequence of amino acids as 1 letter aa codes
chain1 = CaPPBuilder()
chain2 = CaPPBuilder()

a = ""
for pp in chain1.build_peptides(str1):
	a = a+pp.get_sequence()

print(a)

b = ""
for pp in chain2.build_peptides(str2):
	b = b+pp.get_sequence()

print(b)

# use blosum62 for the alignment
matrix = matlist.blosum62

# YOUR CODE HERE for local alignment of a and b using "matrix" and gap opening and gap extension of -5
alignment = pairwise2.align.localds(a,b, matrix, -5, -5)[0]
print(format_alignment(*alignment))
# the code below gets the CA atom lists from both input structures

# get the first model from each structure
m1 = str1[0]
m2 = str2[0]

# get the first chain from each model
for c in m1:
	c1 = c
	break

for c in m2:
	c2 = c
	break

amino_acids1 = aa_residues(c1)
amino_acids2 = aa_residues(c2)

# get all the CA atoms in the chain
atoms1 = []
atoms2 = []

for r in amino_acids1:
	atoms1.append(r["CA"])

print(len(atoms1))

for r in amino_acids2:
	atoms2.append(r["CA"])

print(len(atoms2))

# now construct the list of matched atoms using the local alignment
matched = format_alignment(*alignment).split('\n')

popIdx = [i for i in range(len(matched[1])) if matched[0].startswith(' ', i)]

seq1Start = int(matched[0][:popIdx[len(popIdx)-1]].replace(' ','')) - 1
seq2Start = int(matched[2][:popIdx[len(popIdx)-1]].replace(' ','')) - 1

matched[0] = matched[0][popIdx[len(popIdx)-1]+1:]
matched[1] = matched[1][popIdx[len(popIdx)-1]+1:]
matched[2] = matched[2][popIdx[len(popIdx)-1]+1:]

idx = [i for i in range(len(matched[1])) if matched[1].startswith('|', i)]
gapSeq1 = [i for i in range(len(matched[0])) if matched[0].startswith('-', i)]
gapSeq2 = [i for i in range(len(matched[2])) if matched[2].startswith('-', i)]

fill = atoms2[0]


#Change alignment.start to where sequence actually starts for both
for i in gapSeq1:
	atoms1.insert(i + seq1Start,'-')

for i in gapSeq2:
	atoms2.insert(i + seq2Start,'-')


matoms1 = []
matoms2 = []

for i in idx:
	matoms1.append(atoms1[i + seq1Start])
	matoms2.append(atoms2[i + seq2Start])

# the code below does not use the local alignment result and
# just matches the first 4 atoms of each structure
# to demonstrate the use of superimpose
#matoms1.append(atoms1[0])
#matoms1.append(atoms1[1])
#matoms1.append(atoms1[2])
#matoms1.append(atoms1[3])

#matoms2.append(atoms2[5])
#matoms2.append(atoms2[83])
#matoms2.append(atoms2[95])
#matoms2.append(atoms2[100])

# now superimpose the matched atoms
# note that matoms1 and matoms2 are same length coordinate lists
sup = Superimposer()
sup.set_atoms(matoms1,matoms2)
print("RMSD = " + str(sup.rms))

print(matched[0])
print(matched[2])
print("Alignment Length = " + str(alignment.end - alignment.start))
print("Alignment Score = " + str(alignment.score))
print("RMSD = " + str(sup.rms))

print(format_alignment(*alignment))